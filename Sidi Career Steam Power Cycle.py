import matplotlib.pyplot as plt
import numpy as np
from pyXSteam.XSteam import XSteam
steamTable = XSteam(XSteam.UNIT_SYSTEM_MKS)

# Inputs
tur_eta = 0.84  # isentropic efficiency of turbines
pump_eta= 0.8   # isentropic efficiency of pump 
boiler_eta = 0.95 # boiler efficiency 
condenser_eta= 0.95 # condenser efficiency 
generator_eta= 0.95 # generator efficiency 
m_steam = 286 #  Steam flow rate [Kg/s]
Cv_fuel = 30000 # calorific Value of fuel [KJ/Kg]
Tin_cw = 20   # inlet tempurature of cooling water [k]
Tout_cw = 32.5 # outlet tempurature of cooling water [k]
cp_cw = 4.18 # specific heat of water [kj/kg.K]   
T_h = 450 # inlet temperture of turbine


# Points

p1 = 0.1
s1 = steamTable.sL_p(p1)
T1 = steamTable.t_ps(p1, s1)
h1 = steamTable.hL_p(p1)
print('\nPoint 1')
print(f"P1: {round(float(p1),2)} bar")
print(f"T1: {round(float(T1),1)} degC")
print(f"H1: {round(float(h1),1)} kJ/kg")
print(f"S1: {round(float(s1),3)} kJ/kg K")

p2 = 150
p1_KPa = p1*100
p2_Kpa = p2*100
vf1 = 1/steamTable.rhoL_p(p1)
h2s = h1 + vf1 * (p2_Kpa-p1_KPa)
h2 = ( (h2s - h1)/ pump_eta ) + h1
s2 = steamTable.s_ph(p2, h2)
T2 = steamTable.t_ph(p2, h2)
w_p = h2-h1

print('\nPoint 2')
print(f"H2: {round(float(h2),1)} kJ/kg")
print(f"T2: {round(float(T2),1)} degC")
print(f"S4: {round(float(s2),3)} kJ/kg K")

# Dashed points ("for saturation region")
h2dash = steamTable.hL_p(p2)
s2dash = steamTable.sL_p(p2)
T2dash = steamTable.t_ph(p2, h2dash)
h3dash = steamTable.hV_p(p2)
s3dash = steamTable.sV_p(p2)
T3dash = T2dash



p3 = p2
T3 = T_h
h3 = steamTable.h_pt(p3, T3)
s3 = steamTable.s_pt(p3, T3)
print('\nPoint 3')
print(f"T3: {round(float(T3),1)} degC")
print(f"P3: {round(float(p3),1)} bar")
print(f"H3: {round(float(h3),1)} kJ/kg")
print(f"S3: {round(float(s3),3)} kJ/kg K")

p4s = 40
s4s = s3
T4s = steamTable.t_ps(p4s, s4s)
x4s = steamTable.x_ps(p4s, s4s)
if x4s ==1 :

    h4s = steamTable.h_pt(p4s, T4s)
else:
    h4s = steamTable.h_px(p4s, x4s)


p4 = p4s
print(f"Reheat Pressure: {round(float(p4),1)} bar")
h4=(-1*tur_eta*(h3-h4s) )+ h3
T4 = steamTable.t_ph(p4, h4)
s4 = steamTable.s_ph(p4, h4)
x4 = steamTable.x_ps(p4, s4)

print('\nPoint 4')
print(f"T4: {round(float(T4),1)} degC")
print(f"P4: {round(float(p4),1)} bar")
print(f"H4: {round(float(h4),1)} kJ/kg")
print(f"S4: {round(float(s4),3)} kJ/kg K")
print(f"x4: {round(float(x4),3)}")


p5 = p4
T5 = T3 
h5 = steamTable.h_pt(p5, T5)
s5 = steamTable.s_pt(p5, T5)
print('\nPoint 5')
print(f"T5: {round(float(T5),1)} degC")
print(f"p5: {round(float(p5),1)} bar")
print(f"H5: {round(float(h5),1)} kJ/kg")
print(f"S5: {round(float(s5),3)} kJ/kg K")

p6s = p1
s6s = s5
T6s = steamTable.t_ps(p6s, s6s)
x6s = steamTable.x_ps(p6s, s6s)
h6s = steamTable.h_px(p6s, x6s)


p6 = p1
h6= (-1*tur_eta*(h5-h6s) + h5 )
s6 = steamTable.s_ph(p6, h6)
T6 = steamTable.t_ps(p6, s6)
x6 = steamTable.x_ps(p6, s6)

print('\nPoint 6')
print(f"T6: {round(float(T6),1)} degC")
print(f"p6: {round(float(p6),1)} bar")
print(f"H6: {round(float(h6),1)} kJ/kg")
print(f"S6: {round(float(s6),3)} kJ/kg K")
print(f"x6: {round(float(x6),2)} ")

print('\nSummary')
print(f"Work required by pump: {round(float(w_p),1)} kJ/kg")

# work of high pressure turbine 
w_HPt = h3-h4
print(f"Work generated by HP turbine: {round(float(w_HPt),1)} kJ/kg")

# work of low pressure turbine 
w_LPt = h5-h6
print(f"Work generated by LP turbine: {round(float(w_LPt),1)} kJ/kg")

# Heat input by boiler 
q_H = (h3-h2)+(h5-h4)
print(f"Heat input by boiler: {round(float(q_H),1)} kJ/kg")

# Heat rejected by the condenser
q_L = h6-h1
print(f"Heat rejected by the condenser: {round(float(q_L),1)} kJ/kg")

# net_work
w_net = (w_HPt+w_LPt-w_p) - w_p
print(f"Net work output : {round(float(w_net),1)} kJ/kg")

# Thermal efficiency of the cycle 
eta_th = w_net /q_H*100
print(f"Thermal efficiency is: {round(float(eta_th),1)}%")

# Electrical power out
E_p = ( w_net * m_steam * generator_eta ) / 1000 # in MW 
print(f"Electrical power out : {round(float(E_p),1)} MW")

# required fuel flow rate 
mf = ( (q_H * m_steam) / boiler_eta)/ Cv_fuel
print(f"fuel flow rate : {round(float(mf),2)} Kg/s")

# required cooling water flow rate 
mcw_s = (q_L * m_steam )/ ( condenser_eta * cp_cw* (Tout_cw-Tin_cw)) # kg/s
mcw_h = mcw_s * 3600
print (f"Cooling water flow rate : {round(float(mcw_h))} Kg/h")


font = {'family' : 'Times New Roman',
        'size'   : 10}

plt.figure(figsize=(15,10))
plt.title('T-s Diagram - Sidi Career Steam Power Cycle')
plt.rc('font', **font)

plt.ylabel('Temperature (C)')
plt.xlabel('Entropy (s)')
plt.xlim(-2,10)
plt.ylim(0,600)

T = np.linspace(0.1, 373.945, 400)
sliq = [steamTable.sL_t(t) for t in T]
svap = [steamTable.sV_t(t) for t in T]


plt.plot(svap, T, 'r-', linewidth=2.0)
plt.plot(sliq, T, 'r-', linewidth=2.0)

plt.plot([s1, s2,s2dash, s3dash, s3, s4, s5, s6, s1],[T1, T2, T2dash, T3dash, T3, T4, T5, T6, T1], 'black', linewidth=2.0)
s_val = [s1,s2,s3,s4,s5,s6]
T_val = [T1,T2,T3,T4,T5,T6]
for i in range(0,6):
    plt.plot(s_val[i],T_val[i], marker = "o", markersize = 5, color= "red")



plt.text(0,T1,f'(1)\nT = {round(float(T1),2)} C\nP = {round(float(p1),2)} bar \nh = {round(float(h1),1)} kJ/kg',
    ha='right',backgroundcolor='white')
plt.text(1.5,60,f'(2)\nT = {round(float(T2),2)} C\nP = {round(float(p2),1)} bar \nh = {round(float(h2),1)} kJ/kg',
    ha='left',backgroundcolor='white')
plt.text(5.8,T3-30,f'(3)\nT = {round(float(T3),2)} C\nh = {round(float(h3),1)} kJ/kg \ns = {round(float(s3),3)} kJ/kgK',
    ha='right',backgroundcolor='white')
plt.text(s4-.1,T4-100,f'(4)\nT = {round(float(T4),2)} C\nP = {round(float(p4),1)} bar\nh = {round(float(h4),1)} kJ/kg \ns = {round(float(s4),3)} kJ/kgK',
    ha='right',backgroundcolor='white')
plt.text(s5+.2,T5-70,f'(5)\nT = {round(float(T5),2)} C\nh = {round(float(h5),1)} kJ/kg \ns = {round(float(s5),3)} kJ/kgK',
    ha='left',backgroundcolor='white')
plt.text(s6+.1,T6,f'(6)\nT = {round(float(T6),2)} C\nh = {round(float(h6),1)} kJ/kg \ns = {round(float(s6),3)} kJ/kgK \nx = {round(float(x6),3)}',
    ha='left',backgroundcolor='white')

plt.show()

